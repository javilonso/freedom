/// <reference types="googlemaps" />
import { ElementRef, EventEmitter, NgZone, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MapsAPILoader } from '@agm/core';
import { Location } from '../interfaces/location.interface';
import { GermanAddress } from '../interfaces';
import PlaceResult = google.maps.places.PlaceResult;
import AutocompleteOptions = google.maps.places.AutocompleteOptions;
import * as ɵngcc0 from '@angular/core';
export declare enum Appearance {
    STANDARD = "standard",
    FILL = "fill",
    OUTLINE = "outline",
    LEGACY = "legacy"
}
export declare class MatGoogleMapsAutocompleteComponent implements OnInit {
    private mapsAPILoader;
    private ngZone;
    searchElementRef: ElementRef;
    addressLabelText: string;
    placeholderText: string;
    requiredErrorText: string;
    invalidErrorText: string;
    appearance: string | Appearance;
    address: PlaceResult | string;
    country: string | string[];
    placeIdOnly?: boolean;
    strictBounds?: boolean;
    types?: string[];
    type?: string;
    autoCompleteOptions: AutocompleteOptions;
    onChange: EventEmitter<PlaceResult | string | null>;
    onAutocompleteSelected: EventEmitter<PlaceResult>;
    onGermanAddressMapped: EventEmitter<GermanAddress>;
    onLocationSelected: EventEmitter<Location>;
    private onNewPlaceResult;
    private addressValidator;
    addressSearchControl: FormControl;
    constructor(mapsAPILoader: MapsAPILoader, ngZone: NgZone);
    ngOnInit(): void;
    initGoogleMapsAutocomplete(): void;
    onQuery(event: any): void;
    private resetAddress;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatGoogleMapsAutocompleteComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatGoogleMapsAutocompleteComponent, "mat-google-maps-autocomplete", ["matGoogleMapsAutocomplete"], {
    "addressLabelText": "addressLabelText";
    "placeholderText": "placeholderText";
    "requiredErrorText": "requiredErrorText";
    "invalidErrorText": "invalidErrorText";
    "appearance": "appearance";
    "autoCompleteOptions": "autoCompleteOptions";
    "address": "address";
    "country": "country";
    "placeIdOnly": "placeIdOnly";
    "strictBounds": "strictBounds";
    "types": "types";
    "type": "type";
}, {
    "onChange": "onChange";
    "onAutocompleteSelected": "onAutocompleteSelected";
    "onGermanAddressMapped": "onGermanAddressMapped";
    "onLocationSelected": "onLocationSelected";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibWF0LWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZ29vZ2xlbWFwc1wiIC8+XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICdAYWdtL2NvcmUnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL2xvY2F0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBHZXJtYW5BZGRyZXNzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgUGxhY2VSZXN1bHQgPSBnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VSZXN1bHQ7XG5pbXBvcnQgQXV0b2NvbXBsZXRlT3B0aW9ucyA9IGdvb2dsZS5tYXBzLnBsYWNlcy5BdXRvY29tcGxldGVPcHRpb25zO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBBcHBlYXJhbmNlIHtcbiAgICBTVEFOREFSRCA9IFwic3RhbmRhcmRcIixcbiAgICBGSUxMID0gXCJmaWxsXCIsXG4gICAgT1VUTElORSA9IFwib3V0bGluZVwiLFxuICAgIExFR0FDWSA9IFwibGVnYWN5XCJcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdEdvb2dsZU1hcHNBdXRvY29tcGxldGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgbWFwc0FQSUxvYWRlcjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICBzZWFyY2hFbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIGFkZHJlc3NMYWJlbFRleHQ6IHN0cmluZztcbiAgICBwbGFjZWhvbGRlclRleHQ6IHN0cmluZztcbiAgICByZXF1aXJlZEVycm9yVGV4dDogc3RyaW5nO1xuICAgIGludmFsaWRFcnJvclRleHQ6IHN0cmluZztcbiAgICBhcHBlYXJhbmNlOiBzdHJpbmcgfCBBcHBlYXJhbmNlO1xuICAgIGFkZHJlc3M6IFBsYWNlUmVzdWx0IHwgc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgIHBsYWNlSWRPbmx5PzogYm9vbGVhbjtcbiAgICBzdHJpY3RCb3VuZHM/OiBib29sZWFuO1xuICAgIHR5cGVzPzogc3RyaW5nW107XG4gICAgdHlwZT86IHN0cmluZztcbiAgICBhdXRvQ29tcGxldGVPcHRpb25zOiBBdXRvY29tcGxldGVPcHRpb25zO1xuICAgIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8UGxhY2VSZXN1bHQgfCBzdHJpbmcgfCBudWxsPjtcbiAgICBvbkF1dG9jb21wbGV0ZVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8UGxhY2VSZXN1bHQ+O1xuICAgIG9uR2VybWFuQWRkcmVzc01hcHBlZDogRXZlbnRFbWl0dGVyPEdlcm1hbkFkZHJlc3M+O1xuICAgIG9uTG9jYXRpb25TZWxlY3RlZDogRXZlbnRFbWl0dGVyPExvY2F0aW9uPjtcbiAgICBwcml2YXRlIG9uTmV3UGxhY2VSZXN1bHQ7XG4gICAgcHJpdmF0ZSBhZGRyZXNzVmFsaWRhdG9yO1xuICAgIGFkZHJlc3NTZWFyY2hDb250cm9sOiBGb3JtQ29udHJvbDtcbiAgICBjb25zdHJ1Y3RvcihtYXBzQVBJTG9hZGVyOiBNYXBzQVBJTG9hZGVyLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBpbml0R29vZ2xlTWFwc0F1dG9jb21wbGV0ZSgpOiB2b2lkO1xuICAgIG9uUXVlcnkoZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSByZXNldEFkZHJlc3M7XG59XG4iXX0=