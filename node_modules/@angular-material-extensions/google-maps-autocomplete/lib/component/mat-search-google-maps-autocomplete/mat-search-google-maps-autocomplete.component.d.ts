/// <reference types="googlemaps" />
import { EventEmitter, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { GermanAddress } from '../../interfaces';
import { Appearance } from '../mat-google-maps-autocomplete.component';
import * as ɵngcc0 from '@angular/core';
export declare class MatSearchGoogleMapsAutocompleteComponent implements OnInit {
    private formBuilder;
    appearance: string | Appearance;
    searchAddressLabel: string;
    streetNameLabel: string;
    streetNumberLabel: string;
    postalCodeLabel: string;
    localityLabel: string;
    vicinityLabel: string;
    showVicinity: boolean;
    country: string | string[];
    placeIdOnly?: boolean;
    strictBounds?: boolean;
    types?: string[];
    type?: string;
    readonly: boolean;
    disableSearch: boolean;
    value: GermanAddress;
    onGermanAddressMapped: EventEmitter<GermanAddress>;
    germanAddress: GermanAddress;
    addressFormGroup: FormGroup;
    constructor(formBuilder: FormBuilder);
    ngOnInit(): void;
    createAddressFormGroup(): FormGroup;
    syncAutoComplete($event: google.maps.places.PlaceResult): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatSearchGoogleMapsAutocompleteComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatSearchGoogleMapsAutocompleteComponent, "mat-search-google-maps-autocomplete", never, {
    "appearance": "appearance";
    "searchAddressLabel": "searchAddressLabel";
    "streetNameLabel": "streetNameLabel";
    "streetNumberLabel": "streetNumberLabel";
    "postalCodeLabel": "postalCodeLabel";
    "localityLabel": "localityLabel";
    "vicinityLabel": "vicinityLabel";
    "showVicinity": "showVicinity";
    "country": "country";
    "placeIdOnly": "placeIdOnly";
    "strictBounds": "strictBounds";
    "types": "types";
    "type": "type";
    "readonly": "readonly";
    "disableSearch": "disableSearch";
    "value": "value";
}, {
    "onGermanAddressMapped": "onGermanAddressMapped";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1nb29nbGUtbWFwcy1hdXRvY29tcGxldGUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm1hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZ29vZ2xlbWFwc1wiIC8+XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUJ1aWxkZXIsIEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEdlcm1hbkFkZHJlc3MgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IEFwcGVhcmFuY2UgfSBmcm9tICcuLi9tYXQtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXRTZWFyY2hHb29nbGVNYXBzQXV0b2NvbXBsZXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgICBwcml2YXRlIGZvcm1CdWlsZGVyO1xuICAgIGFwcGVhcmFuY2U6IHN0cmluZyB8IEFwcGVhcmFuY2U7XG4gICAgc2VhcmNoQWRkcmVzc0xhYmVsOiBzdHJpbmc7XG4gICAgc3RyZWV0TmFtZUxhYmVsOiBzdHJpbmc7XG4gICAgc3RyZWV0TnVtYmVyTGFiZWw6IHN0cmluZztcbiAgICBwb3N0YWxDb2RlTGFiZWw6IHN0cmluZztcbiAgICBsb2NhbGl0eUxhYmVsOiBzdHJpbmc7XG4gICAgdmljaW5pdHlMYWJlbDogc3RyaW5nO1xuICAgIHNob3dWaWNpbml0eTogYm9vbGVhbjtcbiAgICBjb3VudHJ5OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgICBwbGFjZUlkT25seT86IGJvb2xlYW47XG4gICAgc3RyaWN0Qm91bmRzPzogYm9vbGVhbjtcbiAgICB0eXBlcz86IHN0cmluZ1tdO1xuICAgIHR5cGU/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgZGlzYWJsZVNlYXJjaDogYm9vbGVhbjtcbiAgICB2YWx1ZTogR2VybWFuQWRkcmVzcztcbiAgICBvbkdlcm1hbkFkZHJlc3NNYXBwZWQ6IEV2ZW50RW1pdHRlcjxHZXJtYW5BZGRyZXNzPjtcbiAgICBnZXJtYW5BZGRyZXNzOiBHZXJtYW5BZGRyZXNzO1xuICAgIGFkZHJlc3NGb3JtR3JvdXA6IEZvcm1Hcm91cDtcbiAgICBjb25zdHJ1Y3Rvcihmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgY3JlYXRlQWRkcmVzc0Zvcm1Hcm91cCgpOiBGb3JtR3JvdXA7XG4gICAgc3luY0F1dG9Db21wbGV0ZSgkZXZlbnQ6IGdvb2dsZS5tYXBzLnBsYWNlcy5QbGFjZVJlc3VsdCk6IHZvaWQ7XG59XG4iXX0=