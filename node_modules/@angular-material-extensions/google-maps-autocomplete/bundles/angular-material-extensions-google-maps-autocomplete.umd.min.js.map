{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/address-validator/mat-address-validator.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/animations/index.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/helpers/parser.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/directives/mat-google-maps-autocomplete.directive.ts","ng://@angular-material-extensions/google-maps-autocomplete/lib/mat-google-maps-autocomplete.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Appearance","MatValidateAddressDirective","prototype","validate","_this","this","control","address","validateAddress","valid","subscribe","eventEmitter","subscription","unsubscribe","_address","value","MatValidateAddressDirective_1","Directive","selector","providers","provide","NG_VALIDATORS","useExisting","forwardRef","multi","MatGoogleMapsAutocompleteComponent","mapsAPILoader","ngZone","addressLabelText","placeholderText","requiredErrorText","invalidErrorText","appearance","STANDARD","autoCompleteOptions","onChange","EventEmitter","onAutocompleteSelected","onGermanAddressMapped","onLocationSelected","onNewPlaceResult","addressValidator","addressSearchControl","FormControl","Validators","compose","required","ngOnInit","options","placeIdOnly","strictBounds","type","country","componentRestrictions","types","assign","initGoogleMapsAutocomplete","load","then","autocomplete","google","maps","places","Autocomplete","searchElementRef","nativeElement","addListener","run","place","getPlace","germanAddress","gmID","id","icon","url","placeID","place_id","displayAddress","formatted_address","name","vicinity","locality","state","geoLocation","latitude","longitude","geometry","location","lat","lng","address_components","forEach","indexOf","streetNumber","short_name","streetName","long_name","postalCode","Number","sublocality","long","short","emit","undefined","catch","err","console","log","onQuery","event","resetAddress","updateValueAndValidity","MapsAPILoader","NgZone","ViewChild","Input","Output","Component","exportAs","template","customAnimation","animation","style","opacity","transform","animate","params","duration","delay","scale","x","y","z","InputAnimations","trigger","transition","useAnimation","query","stagger","animateChild","optional","MatSearchGoogleMapsAutocompleteComponent","formBuilder","searchAddressLabel","streetNameLabel","streetNumberLabel","postalCodeLabel","localityLabel","vicinityLabel","addressFormGroup","createAddressFormGroup","group","syncAutoComplete","$event","reset","placeResult","parseGermanAddress","get","patchValue","toString","FormBuilder","animations","MatGoogleMapsAutocompleteDirective","platformId","elemRef","paramIndex","decorator","isPlatformBrowser","Inject","args","PLATFORM_ID","ElementRef","MatGoogleMapsAutocompleteModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","FlexLayoutModule","MatInputModule","MatIconModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Component, ElementRef, EventEmitter, Input, NgZone, OnInit, Output, ViewChild} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MapsAPILoader} from '@agm/core';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {Location} from '../interfaces/location.interface';\nimport {GermanAddress} from '../interfaces';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\nexport enum Appearance {\n  STANDARD = 'standard',\n  FILL = 'fill',\n  OUTLINE = 'outline',\n  LEGACY = 'legacy',\n}\n\n@Component({\n  selector: 'mat-google-maps-autocomplete',\n  exportAs: 'matGoogleMapsAutocomplete',\n  templateUrl: './mat-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-google-maps-autocomplete.component.scss']\n})\nexport class MatGoogleMapsAutocompleteComponent implements OnInit {\n\n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  @Input()\n  addressLabelText = 'Address';\n\n  @Input()\n  placeholderText = 'Please enter the address';\n\n  @Input()\n  requiredErrorText = 'The address is required';\n\n  @Input()\n  invalidErrorText = 'The address is not valid';\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    this.addressValidator.subscribe(this.onNewPlaceResult);\n\n    const options: AutocompleteOptions = {\n      // types: ['address'],\n      // componentRestrictions: {country: this.country},\n      placeIdOnly: this.placeIdOnly,\n      strictBounds: this.strictBounds,\n      // types: this.types,\n      type: this.type\n    };\n\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.componentRestrictions = {country: this.country} : null;\n    // tslint:disable-next-line:no-unused-expression\n    this.country ? options.types = this.types : null;\n\n    this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n    this.initGoogleMapsAutocomplete();\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            // console.log('onAutocompleteSelected -> ', place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n  public onQuery(event: any) {\n    // console.log('onChange()', event);\n    this.onChange.emit(this.address);\n  }\n\n  private resetAddress() {\n    this.address = null;\n    this.addressSearchControl.updateValueAndValidity();\n  }\n\n}\n","import {Directive, EventEmitter, forwardRef} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn} from '@angular/forms';\nimport PlaceResult = google.maps.places.PlaceResult;\n\n// https://github.com/angular/angular/blob/master/packages/forms/src/directives/validators.ts\n\n@Directive({\n  selector: '[mat-address-validate][formControlName],[MatValidateAddress][formControl],[MatValidateAddress][ngModel]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => MatValidateAddressDirective), multi: true}\n  ]\n})\nexport class MatValidateAddressDirective implements Validator {\n\n  public subscription: any;\n\n  private _address: PlaceResult;\n\n\n  constructor() {\n  }\n\n  public validate(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | any => {\n      return this.address ? null : {\n        validateAddress: {\n          valid: false\n        }\n      };\n    }\n  }\n\n  public subscribe(eventEmitter: EventEmitter<any>) {\n    this.subscription = eventEmitter.subscribe((address: PlaceResult) => {\n      this.address = address;\n    });\n  }\n\n  public unsubscribe() {\n    this.subscription.unsubscribe();\n  }\n\n  get address() {\n    return this._address;\n  }\n\n  set address(value) {\n    this._address = value;\n  }\n}\n","import {animate, animateChild, animation, query, stagger, state, style, transition, trigger, useAnimation} from '@angular/animations';\n\nconst customAnimation = animation(\n  [\n    style({\n      opacity: '{{opacity}}',\n      transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n  ],\n  {\n    params: {\n      duration: '200ms',\n      delay: '0ms',\n      opacity: '0',\n      scale: '1',\n      x: '0',\n      y: '0',\n      z: '0'\n    }\n  }\n);\n\nexport const InputAnimations = [\n  trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n\n  trigger('animateStagger', [\n    state('50', style('*')),\n    state('100', style('*')),\n    state('200', style('*')),\n\n    transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], {optional: true})),\n    transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], {optional: true})),\n    transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], {optional: true}))\n  ]),\n];\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\n\nimport {parseGermanAddress} from '../../helpers/parser';\nimport {GermanAddress} from '../../interfaces';\nimport {Appearance} from '../mat-google-maps-autocomplete.component';\nimport {InputAnimations} from '../../animations';\n\n@Component({\n  selector: 'mat-search-google-maps-autocomplete',\n  templateUrl: './mat-search-google-maps-autocomplete.component.html',\n  styleUrls: ['./mat-search-google-maps-autocomplete.component.scss'],\n  animations: InputAnimations\n})\nexport class MatSearchGoogleMapsAutocompleteComponent implements OnInit {\n\n  @Input()\n  appearance: string | Appearance = Appearance.STANDARD;\n\n  @Input()\n  searchAddressLabel = 'Search Address';\n\n  @Input()\n  streetNameLabel = 'Street';\n\n  @Input()\n  streetNumberLabel = 'Nr.';\n\n  @Input()\n  postalCodeLabel = 'PLZ';\n\n  @Input()\n  localityLabel = 'Locality';\n\n  @Input()\n  vicinityLabel = 'Vicinity';\n\n  @Input()\n  showVicinity: boolean;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n  // types: string[] = ['address'];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  readonly: boolean;\n\n  @Input()\n  disableSearch: boolean;\n\n  @Input()\n  value: GermanAddress;\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  germanAddress: GermanAddress;\n  addressFormGroup: FormGroup;\n\n\n  constructor(private formBuilder: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this.addressFormGroup = this.createAddressFormGroup();\n  }\n\n  createAddressFormGroup(): FormGroup {\n    return this.formBuilder.group({\n      streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],\n      streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],\n      postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],\n      vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],\n      locality: this.formBuilder.group({\n        long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],\n      }),\n    });\n  }\n\n  syncAutoComplete($event: google.maps.places.PlaceResult) {\n    if (this.germanAddress) {\n      this.addressFormGroup.reset();\n    }\n    const germanAddress: GermanAddress = parseGermanAddress($event);\n    this.germanAddress = germanAddress;\n    if (germanAddress.vicinity) {\n      this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity);\n    }\n    if (germanAddress.streetName) {\n      this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName);\n    }\n    if (germanAddress.streetNumber) {\n      this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString());\n    }\n    if (germanAddress.postalCode) {\n      this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode);\n    }\n    if (germanAddress.locality && germanAddress.locality.long) {\n      this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long);\n    }\n\n    this.onGermanAddressMapped.emit(germanAddress);\n  }\n\n}\n","import PlaceResult = google.maps.places.PlaceResult;\nimport {GermanAddress} from '../interfaces';\n\nexport function parseGermanAddress(placeResult: PlaceResult): GermanAddress {\n  const germanAddress: GermanAddress = {\n    gmID: placeResult.id,\n    icon: placeResult.icon,\n    url: placeResult.url,\n    placeID: placeResult.place_id,\n    displayAddress: placeResult.formatted_address,\n    name: placeResult.name,\n    vicinity: placeResult.vicinity,\n    locality: {},\n    state: {},\n    country: {},\n    geoLocation: {latitude: -1, longitude: -1},\n  };\n\n  if (placeResult.geometry && placeResult.geometry.location) {\n    germanAddress.geoLocation.latitude = placeResult.geometry.location.lat();\n    germanAddress.geoLocation.longitude = placeResult.geometry.location.lng();\n  }\n\n  if (placeResult.address_components && placeResult.address_components.length > 0) {\n    placeResult.address_components.forEach(value => {\n      if (value.types.indexOf('street_number') > -1) {\n        germanAddress.streetNumber = value.short_name;\n      }\n      if (value.types.indexOf('route') > -1) {\n        germanAddress.streetName = value.long_name;\n      }\n      if (value.types.indexOf('postal_code') > -1) {\n        germanAddress.postalCode = Number(value.short_name);\n      }\n      if (value.types.indexOf('sublocality') > -1) {\n        germanAddress.sublocality = value.long_name;\n      }\n      if (value.types.indexOf('locality') > -1) {\n        germanAddress.locality.long = value.long_name;\n        germanAddress.locality.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_1') > -1) {\n        germanAddress.state.long = value.long_name;\n        germanAddress.state.short = value.short_name;\n      }\n      if (value.types.indexOf('country') > -1) {\n        germanAddress.country.long = value.long_name;\n        germanAddress.country.short = value.short_name;\n      }\n      if (value.types.indexOf('administrative_area_level_3') > -1) {\n        germanAddress.locality.short = value.short_name;\n      }\n    });\n  }\n  return germanAddress;\n}\n","import {Directive, ElementRef, EventEmitter, Inject, Input, NgZone, OnInit, Output, PLATFORM_ID} from '@angular/core';\nimport {FormControl, Validators} from '@angular/forms';\nimport {MatValidateAddressDirective} from '../directives/address-validator/mat-address-validator.directive';\nimport {MapsAPILoader} from '@agm/core';\nimport {Location} from '../interfaces/location.interface';\nimport {isPlatformBrowser} from '@angular/common';\nimport {GermanAddress} from '../interfaces/germand.address.interface';\nimport PlaceResult = google.maps.places.PlaceResult;\nimport AutocompleteOptions = google.maps.places.AutocompleteOptions;\n\n@Directive({\n  selector: '[matGoogleMapsAutocomplete]',\n  exportAs: 'matGoogleMapsAutocomplete',\n})\nexport class MatGoogleMapsAutocompleteDirective implements OnInit {\n\n  @Input()\n  address: PlaceResult | string;\n\n  @Input()\n  country: string | string[];\n\n  @Input()\n  placeIdOnly?: boolean;\n\n  @Input()\n  strictBounds?: boolean;\n\n  @Input()\n  types?: string[];\n\n  @Input()\n  type?: string;\n\n  @Input()\n  autoCompleteOptions: AutocompleteOptions = {};\n\n  @Output()\n  onChange: EventEmitter<PlaceResult | string | null> = new EventEmitter<PlaceResult | string | null>();\n\n  @Output()\n  onAutocompleteSelected: EventEmitter<PlaceResult> = new EventEmitter<PlaceResult>();\n\n  @Output()\n  onGermanAddressMapped: EventEmitter<GermanAddress> = new EventEmitter<GermanAddress>();\n\n  @Output()\n  onLocationSelected: EventEmitter<Location> = new EventEmitter<Location>();\n\n  private onNewPlaceResult: EventEmitter<any> = new EventEmitter();\n  private addressValidator: MatValidateAddressDirective = new MatValidateAddressDirective();\n\n  public addressSearchControl: FormControl = new FormControl({value: null}, Validators.compose([\n    Validators.required,\n    this.addressValidator.validate()])\n  );\n\n  constructor(@Inject(PLATFORM_ID) public platformId: string,\n              public elemRef: ElementRef,\n              public mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone) {\n  }\n\n  ngOnInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.addressValidator.subscribe(this.onNewPlaceResult);\n      const options: AutocompleteOptions = {\n        // types: ['address'],\n        // componentRestrictions: {country: this.country},\n        placeIdOnly: this.placeIdOnly,\n        strictBounds: this.strictBounds,\n        // types: this.types,\n        type: this.type\n      };\n\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.componentRestrictions = {country: this.country} : null;\n      // tslint:disable-next-line:no-unused-expression\n      this.country ? options.types = this.types : null;\n\n      this.autoCompleteOptions = Object.assign(this.autoCompleteOptions, options);\n      this.initGoogleMapsAutocomplete();\n    }\n\n  }\n\n  public initGoogleMapsAutocomplete() {\n    this.mapsAPILoader\n      .load()\n      .then(() => {\n        const autocomplete = new google.maps.places.Autocomplete(this.elemRef.nativeElement, this.autoCompleteOptions);\n        autocomplete.addListener('place_changed', () => {\n          this.ngZone.run(() => {\n            // get the place result\n            const place: PlaceResult = autocomplete.getPlace();\n\n            const germanAddress: GermanAddress = {\n              gmID: place.id,\n              icon: place.icon,\n              url: place.url,\n              placeID: place.place_id,\n              displayAddress: place.formatted_address,\n              name: place.name,\n              vicinity: place.vicinity,\n              locality: {},\n              state: {},\n              country: {},\n              geoLocation: {latitude: -1, longitude: -1},\n            };\n\n            if (place.geometry && place.geometry.location) {\n              germanAddress.geoLocation.latitude = place.geometry.location.lat();\n              germanAddress.geoLocation.longitude = place.geometry.location.lng();\n            }\n\n            place.address_components.forEach(value => {\n              if (value.types.indexOf('street_number') > -1) {\n                germanAddress.streetNumber = value.short_name;\n              }\n              if (value.types.indexOf('route') > -1) {\n                germanAddress.streetName = value.long_name;\n              }\n              if (value.types.indexOf('postal_code') > -1) {\n                germanAddress.postalCode = Number(value.short_name);\n              }\n              if (value.types.indexOf('sublocality') > -1) {\n                germanAddress.sublocality = value.long_name;\n              }\n              if (value.types.indexOf('locality') > -1) {\n                germanAddress.locality.long = value.long_name;\n                germanAddress.locality.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_1') > -1) {\n                germanAddress.state.long = value.long_name;\n                germanAddress.state.short = value.short_name;\n              }\n              if (value.types.indexOf('country') > -1) {\n                germanAddress.country.long = value.long_name;\n                germanAddress.country.short = value.short_name;\n              }\n              if (value.types.indexOf('administrative_area_level_3') > -1) {\n                germanAddress.locality.short = value.short_name;\n              }\n            });\n\n            this.onGermanAddressMapped.emit(germanAddress);\n\n            if (!place.place_id || place.geometry === undefined || place.geometry === null) {\n              // place result is not valid\n              return;\n            } else {\n              // show dialog to select a address from the input\n              // emit failed event\n            }\n            this.address = place.formatted_address;\n            this.onAutocompleteSelected.emit(place);\n            this.onLocationSelected.emit(\n              {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n              });\n          });\n        });\n      })\n      .catch((err) => console.log(err));\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport {MatGoogleMapsAutocompleteDirective} from './directives/mat-google-maps-autocomplete.directive';\nimport {MatValidateAddressDirective} from './directives/address-validator/mat-address-validator.directive';\nimport {MatGoogleMapsAutocompleteComponent} from './component/mat-google-maps-autocomplete.component';\n// tslint:disable-next-line:max-line-length\nimport {MatSearchGoogleMapsAutocompleteComponent} from './component/mat-search-google-maps-autocomplete/mat-search-google-maps-autocomplete.component';\n\n\n@NgModule({\n  imports:\n    [\n      CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      FlexLayoutModule,\n      MatInputModule,\n      MatIconModule\n    ],\n  exports: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ],\n  declarations: [\n    MatGoogleMapsAutocompleteComponent,\n    MatGoogleMapsAutocompleteDirective,\n    MatValidateAddressDirective,\n    MatSearchGoogleMapsAutocompleteComponent\n  ]\n})\nexport class MatGoogleMapsAutocompleteModule {\n}\n"]}