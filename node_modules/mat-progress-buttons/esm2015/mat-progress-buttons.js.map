{"version":3,"file":"mat-progress-buttons.js","sources":["../../tmp/module/component/spinner-button/spinner-button.component.ts","../../tmp/module/component/bar-button/bar-button.component.ts","../../tmp/module/mat-progress-buttons.module.ts"],"sourcesContent":["import { Component, Input, Output, HostListener, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-spinner-button',\n  template: `\n    <button mat-button\n      [type]=\"options.type\"\n      [color]=\"options.buttonColor\"\n      [class.active]=\"options.active\"\n      [class.fullWidth]=\"options.fullWidth\"\n      [class.mat-raised-button]=\"options.raised\"\n      [class.mat-stroked-button]=\"options.stroked\"\n      [class.mat-flat-button]=\"options.flat\"\n      [class.mat-fab]=\"options.fab\"\n      [ngClass]=\"options.customClass\"\n      [disabled]=\"options.active || options.disabled\">\n\n      <ng-container\n        *ngIf=\"options.buttonIcon\">\n        <mat-icon\n          class=\"mat-button-icon\"\n          [class.is-mat-icon]=\"!options.buttonIcon.fontSet\"\n          [class.active]=\"options.active && !options.disabled\"\n          [ngClass]=\"options.buttonIcon.customClass\"\n          [fontSet]=\"options.buttonIcon.fontSet\"\n          [fontIcon]=\"options.buttonIcon.fontIcon\"\n          [color]=\"options.buttonIcon.color\"\n          [svgIcon]=\"options.buttonIcon.svgIcon\"\n          [inline]=\"options.buttonIcon.inline\">\n          {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}\n        </mat-icon>\n      </ng-container>\n\n      <span\n        class=\"button-text\"\n        *ngIf=\"!options.fab\"\n        [class.active]=\"options.active && !options.disabled\">\n          {{ options.text }}\n      </span>\n\n      <ng-container\n        *ngIf=\"options.fab && options.icon\">\n        <mat-icon\n          [fontSet]=\"options.icon.fontSet\"\n          [fontIcon]=\"options.icon.fontIcon\"\n          [color]=\"options.icon.color\"\n          [svgIcon]=\"options.icon.svgIcon\"\n          [inline]=\"options.icon.inline\">\n            {{ options.icon.fontSet ? '' : options.icon.fontIcon }}\n        </mat-icon>\n      </ng-container>\n\n      <mat-spinner class=\"spinner\"\n        *ngIf=\"options.active && !options.disabled\"\n        [diameter]=\"options.fab ? 58 : options.spinnerSize\"\n        [color]=\"options.spinnerColor\"\n        [mode]=\"options.mode\"\n        [value]=\"options.value\"\n        [class.active]=\"options.active && !options.disabled\">\n      </mat-spinner>\n    </button>\n  `,\n  styles: [`\n    :host button{outline:none}:host button.active{cursor:not-allowed}:host button/deep/ .mat-button-wrapper{display:flex;align-items:center;justify-content:center}:host button.fullWidth{width:100%}:host button.mat-fab .spinner{margin-top:-15px}:host button .spinner{position:absolute;top:25%;opacity:0;transition:opacity .3s ease-in-out}:host button .spinner.active{opacity:1}:host button .button-text{opacity:1;transition:opacity .3s ease-in-out}:host button .button-text.active{opacity:0}:host button mat-icon.mat-button-icon{padding-right:5px;transition:opacity .3s ease-in-out}:host button mat-icon.mat-button-icon.is-mat-icon{font-size:18px;position:relative;top:3px}:host button mat-icon.mat-button-icon.active{opacity:0}\n  `]\n})\nexport class MatSpinnerButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n  }\n}\n","import { Component, Input, Output, EventEmitter, HostListener, OnChanges, SimpleChanges } from '@angular/core';\nimport { MatProgressButtonOptions } from '../../mat-progress-buttons.interface';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'mat-bar-button',\n  template: `\n    <button mat-button\n      [type]=\"options.type\"\n      [color]=\"options.buttonColor\"\n      [class.active]=\"options.active\"\n      [class.mat-raised-button]=\"options.raised\"\n      [class.mat-stroked-button]=\"options.stroked\"\n      [class.mat-flat-button]=\"options.flat\"\n      [class.fullWidth]=\"options.fullWidth\"\n      [ngClass]=\"options.customClass\"\n      [disabled]=\"options.active || options.disabled\">\n\n      <ng-container\n        *ngIf=\"options.buttonIcon\">\n        <mat-icon\n          [class.is-mat-icon]=\"!options.buttonIcon.fontSet\"\n          [ngClass]=\"options.buttonIcon.customClass\"\n          [fontSet]=\"options.buttonIcon.fontSet\"\n          [fontIcon]=\"options.buttonIcon.fontIcon\"\n          [color]=\"options.buttonIcon.color\"\n          [svgIcon]=\"options.buttonIcon.svgIcon\"\n          [inline]=\"options.buttonIcon.inline\">\n          {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}\n        </mat-icon>\n      </ng-container>\n\n      <span>{{ options.text }}</span>\n\n      <mat-progress-bar\n        class=\"bar\"\n        *ngIf=\"options.active && !options.disabled\"\n        [color]=\"options.barColor\"\n        [mode]=\"options.mode\"\n        [value]=\"options.value\">\n      </mat-progress-bar>\n    </button>\n  `,\n  styles: [`\n    :host button.active{cursor:not-allowed}:host button.fullWidth{width:100%}:host button .bar{position:absolute;top:0;left:0}:host button mat-icon{padding-right:5px}:host button mat-icon.is-mat-icon{font-size:18px;position:relative;top:3px}\n  `]\n})\nexport class MatBarButtonComponent implements OnChanges {\n  @Input() options: MatProgressButtonOptions;\n  @Input() active: boolean;\n  @Input() disabled: boolean;\n  @Output() btnClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n  @HostListener('click', ['$event'])\n  public onClick(event: MouseEvent) {\n    if (!this.options.disabled && !this.options.active) {\n      this.btnClick.emit(event);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.active) {\n      this.options.active = changes.active.currentValue;\n    }\n    if (changes.disabled) {\n      this.options.disabled = changes.disabled.currentValue;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nimport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatIconModule } from '@angular/material/icon';\n\n// Export module's public API\nexport { MatSpinnerButtonComponent } from './component/spinner-button/spinner-button.component';\nexport { MatBarButtonComponent } from './component/bar-button/bar-button.component';\nexport { MatProgressButtonOptions } from './mat-progress-buttons.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRippleModule,\n    MatIconModule\n  ],\n  exports: [\n    MatSpinnerButtonComponent,\n    MatBarButtonComponent\n  ],\n  declarations: [\n    MatSpinnerButtonComponent,\n    MatBarButtonComponent\n  ]\n})\nexport class MatProgressButtonsModule {\n  static forRoot(): ModuleWithProviders<MatProgressButtonsModule> {\n    return {\n      ngModule: MatProgressButtonsModule\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAoEa,yBAAyB;IAjEtC;QAsEY,aAAQ,GAA6B,IAAI,YAAY,EAAc,CAAC;KAgB/E;;;;;IAdQ,OAAO,CAAC,KAAiB;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAClD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;KACF;;;;;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;SACnD;QACD,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;SACvD;KACF;;;YArFF,SAAS,SAAC;;gBAET,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyDT;gBACD,MAAM,EAAE,CAAC;;GAER,CAAC;aACH;;;sBAEE,KAAK;qBACL,KAAK;uBACL,KAAK;uBAEL,MAAM;sBACN,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;;;;;;AC1EnC,MA+Ca,qBAAqB;IA5ClC;QAgDY,aAAQ,GAA6B,IAAI,YAAY,EAAc,CAAC;KAgB/E;;;;;IAdQ,OAAO,CAAC,KAAiB;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YAClD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3B;KACF;;;;;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC;SACnD;QACD,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC;SACvD;KACF;;;YA/DF,SAAS,SAAC;;gBAET,QAAQ,EAAE,gBAAgB;gBAC1B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoCT;gBACD,MAAM,EAAE,CAAC;;GAER,CAAC;aACH;;;sBAEE,KAAK;qBACL,KAAK;uBACL,KAAK;uBACL,MAAM;sBACN,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;;;;;;ACpDnC,MAkCa,wBAAwB;;;;IACnC,OAAO,OAAO;QACZ,OAAO;YACL,QAAQ,EAAE,wBAAwB;SACnC,CAAC;KACH;;;YAvBF,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;oBACZ,eAAe;oBACf,oBAAoB;oBACpB,wBAAwB;oBACxB,eAAe;oBACf,aAAa;iBACd;gBACD,OAAO,EAAE;oBACP,yBAAyB;oBACzB,qBAAqB;iBACtB;gBACD,YAAY,EAAE;oBACZ,yBAAyB;oBACzB,qBAAqB;iBACtB;aACF;;;;;;;;;;;;;;;;;"}