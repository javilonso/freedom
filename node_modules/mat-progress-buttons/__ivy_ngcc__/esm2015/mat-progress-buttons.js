import { Component, Input, Output, HostListener, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatRippleModule } from '@angular/material/core';
import { MatIconModule } from '@angular/material/icon';

/**
 * @fileoverview added by tsickle
 * Generated from: module/component/spinner-button/spinner-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/material/button';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '@angular/material/icon';
import * as ɵngcc4 from '@angular/material/progress-spinner';
import * as ɵngcc5 from '@angular/material/progress-bar';

function MatSpinnerButtonComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 4);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("is-mat-icon", !ctx_r10.options.buttonIcon.fontSet)("active", ctx_r10.options.active && !ctx_r10.options.disabled);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r10.options.buttonIcon.customClass)("fontSet", ctx_r10.options.buttonIcon.fontSet)("fontIcon", ctx_r10.options.buttonIcon.fontIcon)("color", ctx_r10.options.buttonIcon.color)("svgIcon", ctx_r10.options.buttonIcon.svgIcon)("inline", ctx_r10.options.buttonIcon.inline);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r10.options.buttonIcon.fontSet ? "" : ctx_r10.options.buttonIcon.fontIcon, " ");
} }
function MatSpinnerButtonComponent_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 5);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r11.options.active && !ctx_r11.options.disabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r11.options.text, " ");
} }
function MatSpinnerButtonComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("fontSet", ctx_r12.options.icon.fontSet)("fontIcon", ctx_r12.options.icon.fontIcon)("color", ctx_r12.options.icon.color)("svgIcon", ctx_r12.options.icon.svgIcon)("inline", ctx_r12.options.icon.inline);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r12.options.icon.fontSet ? "" : ctx_r12.options.icon.fontIcon, " ");
} }
function MatSpinnerButtonComponent_mat_spinner_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-spinner", 7);
} if (rf & 2) {
    const ctx_r13 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("active", ctx_r13.options.active && !ctx_r13.options.disabled);
    ɵngcc0.ɵɵproperty("diameter", ctx_r13.options.fab ? 58 : ctx_r13.options.spinnerSize)("color", ctx_r13.options.spinnerColor)("mode", ctx_r13.options.mode)("value", ctx_r13.options.value);
} }
function MatBarButtonComponent_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵelementStart(1, "mat-icon", 3);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵclassProp("is-mat-icon", !ctx_r14.options.buttonIcon.fontSet);
    ɵngcc0.ɵɵproperty("ngClass", ctx_r14.options.buttonIcon.customClass)("fontSet", ctx_r14.options.buttonIcon.fontSet)("fontIcon", ctx_r14.options.buttonIcon.fontIcon)("color", ctx_r14.options.buttonIcon.color)("svgIcon", ctx_r14.options.buttonIcon.svgIcon)("inline", ctx_r14.options.buttonIcon.inline);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r14.options.buttonIcon.fontSet ? "" : ctx_r14.options.buttonIcon.fontIcon, " ");
} }
function MatBarButtonComponent_mat_progress_bar_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "mat-progress-bar", 4);
} if (rf & 2) {
    const ctx_r15 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("color", ctx_r15.options.barColor)("mode", ctx_r15.options.mode)("value", ctx_r15.options.value);
} }
class MatSpinnerButtonComponent {
    constructor() {
        this.btnClick = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (!this.options.disabled && !this.options.active) {
            this.btnClick.emit(event);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.active) {
            this.options.active = changes.active.currentValue;
        }
        if (changes.disabled) {
            this.options.disabled = changes.disabled.currentValue;
        }
    }
}
MatSpinnerButtonComponent.ɵfac = function MatSpinnerButtonComponent_Factory(t) { return new (t || MatSpinnerButtonComponent)(); };
MatSpinnerButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSpinnerButtonComponent, selectors: [["mat-spinner-button"]], hostBindings: function MatSpinnerButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MatSpinnerButtonComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { options: "options", active: "active", disabled: "disabled" }, outputs: { btnClick: "btnClick" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 20, consts: [["mat-button", "", 3, "type", "color", "ngClass", "disabled"], [4, "ngIf"], ["class", "button-text", 3, "active", 4, "ngIf"], ["class", "spinner", 3, "diameter", "color", "mode", "value", "active", 4, "ngIf"], [1, "mat-button-icon", 3, "ngClass", "fontSet", "fontIcon", "color", "svgIcon", "inline"], [1, "button-text"], [3, "fontSet", "fontIcon", "color", "svgIcon", "inline"], [1, "spinner", 3, "diameter", "color", "mode", "value"]], template: function MatSpinnerButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵtemplate(1, MatSpinnerButtonComponent_ng_container_1_Template, 3, 11, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(2, MatSpinnerButtonComponent_span_2_Template, 2, 3, "span", 2);
        ɵngcc0.ɵɵtemplate(3, MatSpinnerButtonComponent_ng_container_3_Template, 3, 6, "ng-container", 1);
        ɵngcc0.ɵɵtemplate(4, MatSpinnerButtonComponent_mat_spinner_4_Template, 1, 6, "mat-spinner", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.options.active)("fullWidth", ctx.options.fullWidth)("mat-raised-button", ctx.options.raised)("mat-stroked-button", ctx.options.stroked)("mat-flat-button", ctx.options.flat)("mat-fab", ctx.options.fab);
        ɵngcc0.ɵɵproperty("type", ctx.options.type)("color", ctx.options.buttonColor)("ngClass", ctx.options.customClass)("disabled", ctx.options.active || ctx.options.disabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.buttonIcon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.options.fab);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.fab && ctx.options.icon);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.active && !ctx.options.disabled);
    } }, directives: [ɵngcc1.MatButton, ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc3.MatIcon, ɵngcc4.MatSpinner], styles: ["[_nghost-%COMP%]   button[_ngcontent-%COMP%]{outline:none}[_nghost-%COMP%]   button.active[_ngcontent-%COMP%]{cursor:not-allowed}[_nghost-%COMP%]   button[_ngcontent-%COMP%]  .mat-button-wrapper{display:flex;align-items:center;justify-content:center}[_nghost-%COMP%]   button.fullWidth[_ngcontent-%COMP%]{width:100%}[_nghost-%COMP%]   button.mat-fab[_ngcontent-%COMP%]   .spinner[_ngcontent-%COMP%]{margin-top:-15px}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   .spinner[_ngcontent-%COMP%]{position:absolute;top:25%;opacity:0;transition:opacity .3s ease-in-out}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   .spinner.active[_ngcontent-%COMP%]{opacity:1}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   .button-text[_ngcontent-%COMP%]{opacity:1;transition:opacity .3s ease-in-out}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   .button-text.active[_ngcontent-%COMP%]{opacity:0}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   mat-icon.mat-button-icon[_ngcontent-%COMP%]{padding-right:5px;transition:opacity .3s ease-in-out}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   mat-icon.mat-button-icon.is-mat-icon[_ngcontent-%COMP%]{font-size:18px;position:relative;top:3px}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   mat-icon.mat-button-icon.active[_ngcontent-%COMP%]{opacity:0}"] });
MatSpinnerButtonComponent.propDecorators = {
    options: [{ type: Input }],
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    btnClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSpinnerButtonComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'mat-spinner-button',
                template: `
    <button mat-button
      [type]="options.type"
      [color]="options.buttonColor"
      [class.active]="options.active"
      [class.fullWidth]="options.fullWidth"
      [class.mat-raised-button]="options.raised"
      [class.mat-stroked-button]="options.stroked"
      [class.mat-flat-button]="options.flat"
      [class.mat-fab]="options.fab"
      [ngClass]="options.customClass"
      [disabled]="options.active || options.disabled">

      <ng-container
        *ngIf="options.buttonIcon">
        <mat-icon
          class="mat-button-icon"
          [class.is-mat-icon]="!options.buttonIcon.fontSet"
          [class.active]="options.active && !options.disabled"
          [ngClass]="options.buttonIcon.customClass"
          [fontSet]="options.buttonIcon.fontSet"
          [fontIcon]="options.buttonIcon.fontIcon"
          [color]="options.buttonIcon.color"
          [svgIcon]="options.buttonIcon.svgIcon"
          [inline]="options.buttonIcon.inline">
          {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}
        </mat-icon>
      </ng-container>

      <span
        class="button-text"
        *ngIf="!options.fab"
        [class.active]="options.active && !options.disabled">
          {{ options.text }}
      </span>

      <ng-container
        *ngIf="options.fab && options.icon">
        <mat-icon
          [fontSet]="options.icon.fontSet"
          [fontIcon]="options.icon.fontIcon"
          [color]="options.icon.color"
          [svgIcon]="options.icon.svgIcon"
          [inline]="options.icon.inline">
            {{ options.icon.fontSet ? '' : options.icon.fontIcon }}
        </mat-icon>
      </ng-container>

      <mat-spinner class="spinner"
        *ngIf="options.active && !options.disabled"
        [diameter]="options.fab ? 58 : options.spinnerSize"
        [color]="options.spinnerColor"
        [mode]="options.mode"
        [value]="options.value"
        [class.active]="options.active && !options.disabled">
      </mat-spinner>
    </button>
  `,
                styles: [`
    :host button{outline:none}:host button.active{cursor:not-allowed}:host button/deep/ .mat-button-wrapper{display:flex;align-items:center;justify-content:center}:host button.fullWidth{width:100%}:host button.mat-fab .spinner{margin-top:-15px}:host button .spinner{position:absolute;top:25%;opacity:0;transition:opacity .3s ease-in-out}:host button .spinner.active{opacity:1}:host button .button-text{opacity:1;transition:opacity .3s ease-in-out}:host button .button-text.active{opacity:0}:host button mat-icon.mat-button-icon{padding-right:5px;transition:opacity .3s ease-in-out}:host button mat-icon.mat-button-icon.is-mat-icon{font-size:18px;position:relative;top:3px}:host button mat-icon.mat-button-icon.active{opacity:0}
  `]
            }]
    }], function () { return []; }, { btnClick: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], options: [{
            type: Input
        }], active: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: module/component/bar-button/bar-button.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatBarButtonComponent {
    constructor() {
        this.btnClick = new EventEmitter();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        if (!this.options.disabled && !this.options.active) {
            this.btnClick.emit(event);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.active) {
            this.options.active = changes.active.currentValue;
        }
        if (changes.disabled) {
            this.options.disabled = changes.disabled.currentValue;
        }
    }
}
MatBarButtonComponent.ɵfac = function MatBarButtonComponent_Factory(t) { return new (t || MatBarButtonComponent)(); };
MatBarButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatBarButtonComponent, selectors: [["mat-bar-button"]], hostBindings: function MatBarButtonComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function MatBarButtonComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { options: "options", active: "active", disabled: "disabled" }, outputs: { btnClick: "btnClick" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 17, consts: [["mat-button", "", 3, "type", "color", "ngClass", "disabled"], [4, "ngIf"], ["class", "bar", 3, "color", "mode", "value", 4, "ngIf"], [3, "ngClass", "fontSet", "fontIcon", "color", "svgIcon", "inline"], [1, "bar", 3, "color", "mode", "value"]], template: function MatBarButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵtemplate(1, MatBarButtonComponent_ng_container_1_Template, 3, 9, "ng-container", 1);
        ɵngcc0.ɵɵelementStart(2, "span");
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, MatBarButtonComponent_mat_progress_bar_4_Template, 1, 3, "mat-progress-bar", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("active", ctx.options.active)("mat-raised-button", ctx.options.raised)("mat-stroked-button", ctx.options.stroked)("mat-flat-button", ctx.options.flat)("fullWidth", ctx.options.fullWidth);
        ɵngcc0.ɵɵproperty("type", ctx.options.type)("color", ctx.options.buttonColor)("ngClass", ctx.options.customClass)("disabled", ctx.options.active || ctx.options.disabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.buttonIcon);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵtextInterpolate(ctx.options.text);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.options.active && !ctx.options.disabled);
    } }, directives: [ɵngcc1.MatButton, ɵngcc2.NgClass, ɵngcc2.NgIf, ɵngcc3.MatIcon, ɵngcc5.MatProgressBar], styles: ["[_nghost-%COMP%]   button.active[_ngcontent-%COMP%]{cursor:not-allowed}[_nghost-%COMP%]   button.fullWidth[_ngcontent-%COMP%]{width:100%}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%]{position:absolute;top:0;left:0}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{padding-right:5px}[_nghost-%COMP%]   button[_ngcontent-%COMP%]   mat-icon.is-mat-icon[_ngcontent-%COMP%]{font-size:18px;position:relative;top:3px}"] });
MatBarButtonComponent.propDecorators = {
    options: [{ type: Input }],
    active: [{ type: Input }],
    disabled: [{ type: Input }],
    btnClick: [{ type: Output }],
    onClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBarButtonComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line:component-selector
                selector: 'mat-bar-button',
                template: `
    <button mat-button
      [type]="options.type"
      [color]="options.buttonColor"
      [class.active]="options.active"
      [class.mat-raised-button]="options.raised"
      [class.mat-stroked-button]="options.stroked"
      [class.mat-flat-button]="options.flat"
      [class.fullWidth]="options.fullWidth"
      [ngClass]="options.customClass"
      [disabled]="options.active || options.disabled">

      <ng-container
        *ngIf="options.buttonIcon">
        <mat-icon
          [class.is-mat-icon]="!options.buttonIcon.fontSet"
          [ngClass]="options.buttonIcon.customClass"
          [fontSet]="options.buttonIcon.fontSet"
          [fontIcon]="options.buttonIcon.fontIcon"
          [color]="options.buttonIcon.color"
          [svgIcon]="options.buttonIcon.svgIcon"
          [inline]="options.buttonIcon.inline">
          {{ options.buttonIcon.fontSet ? '' : options.buttonIcon.fontIcon }}
        </mat-icon>
      </ng-container>

      <span>{{ options.text }}</span>

      <mat-progress-bar
        class="bar"
        *ngIf="options.active && !options.disabled"
        [color]="options.barColor"
        [mode]="options.mode"
        [value]="options.value">
      </mat-progress-bar>
    </button>
  `,
                styles: [`
    :host button.active{cursor:not-allowed}:host button.fullWidth{width:100%}:host button .bar{position:absolute;top:0;left:0}:host button mat-icon{padding-right:5px}:host button mat-icon.is-mat-icon{font-size:18px;position:relative;top:3px}
  `]
            }]
    }], function () { return []; }, { btnClick: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], options: [{
            type: Input
        }], active: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();

/**
 * @fileoverview added by tsickle
 * Generated from: module/mat-progress-buttons.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MatProgressButtonsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: MatProgressButtonsModule
        };
    }
}
MatProgressButtonsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressButtonsModule });
MatProgressButtonsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressButtonsModule_Factory(t) { return new (t || MatProgressButtonsModule)(); }, imports: [[
            CommonModule,
            MatButtonModule,
            MatProgressBarModule,
            MatProgressSpinnerModule,
            MatRippleModule,
            MatIconModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressButtonsModule, { declarations: function () { return [MatSpinnerButtonComponent,
        MatBarButtonComponent]; }, imports: function () { return [CommonModule,
        MatButtonModule,
        MatProgressBarModule,
        MatProgressSpinnerModule,
        MatRippleModule,
        MatIconModule]; }, exports: function () { return [MatSpinnerButtonComponent,
        MatBarButtonComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressButtonsModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    MatButtonModule,
                    MatProgressBarModule,
                    MatProgressSpinnerModule,
                    MatRippleModule,
                    MatIconModule
                ],
                exports: [
                    MatSpinnerButtonComponent,
                    MatBarButtonComponent
                ],
                declarations: [
                    MatSpinnerButtonComponent,
                    MatBarButtonComponent
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: mat-progress-buttons.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { MatSpinnerButtonComponent, MatBarButtonComponent, MatProgressButtonsModule };

//# sourceMappingURL=mat-progress-buttons.js.map